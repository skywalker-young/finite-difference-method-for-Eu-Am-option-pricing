start_date = '20070101'
end_date = '20170731'
cal_dates = DataAPI.TradeCalGet(exchangeCD=u"XSHG", beginDate=start_date, endDate=end_date).sort('calendarDate')
cal_dates = cal_dates[cal_dates['isOpen']==1]
trade_date_list = cal_dates['calendarDate'].values.tolist()
cal_dates = cal_dates[cal_dates['isMonthEnd']==1]
trade_month_list = cal_dates['calendarDate'].values.tolist()

data = DataAPI.MktEqudAdjGet(secID=set_universe('A'), isOpen=u"1", beginDate=start_date, endDate=end_date,
                   field=u"tradeDate,secID,closePrice,negMarketValue,marketValue",pandas="1")
                  
closePrice = data.pivot(index='tradeDate', columns='secID', values='closePrice')
negMarketValue = data.pivot(index='tradeDate', columns='secID', values='negMarketValue')
marketValue = data.pivot(index='tradeDate', columns='secID', values='marketValue')

PB = pd.DataFrame()
for date in trade_date_list:
    tmp = DataAPI.MktStockFactorsOneDayGet(tradeDate=date, secID=set_universe('A'), field=[u'secID', 'PB', 'tradeDate'], pandas="1")
    tmp = tmp.pivot(index='tradeDate', columns='secID', values='PB')
    PB = PB.append(tmp)

PB = pd.read_csv('PB.csv', index_col=0)

BP = PB.copy(deep=True)
for date in trade_date_list:
    tmp_BP = PB.loc[date, :].dropna()
    tmp_BP = 1/(pd.Series(winsorize(tmp_BP, win_type='QuantileDraw', pvalue=0.05)))
    tmp_BP.replace([np.inf, -np.inf], 0, inplace=True)
    BP.loc[date, tmp_BP.index]=tmp_BP
        

SIZE = np.log(marketValue)
for date in trade_date_list:
    tmp_size = SIZE.loc[date, :].dropna()
    tmp_size = pd.Series(winsorize(tmp_size, win_type='QuantileDraw', pvalue=0.05))
    SIZE.loc[date, tmp_size.index]=tmp_size

negMarketValue = negMarketValue.fillna(method='ffill')
negMarketValue_ = negMarketValue.fillna(method='bfill')

def cal_factor_return(factor):
    factor_return = pd.Series(index=trade_date_list[1:])
    for i in range(len(factor.index)-1):
        date = factor.index[i]
        q = factor.ix[i].dropna()
        q_min = q.quantile(0.33)
        q_max = q.quantile(0.66)
        q_min_univ = q[q<=q_min].index.values
        q_max_univ = q[q>=q_max].index.values

        date_1 = factor.index[i+1]
        q_min_weight = negMarketValue_.loc[date, q_min_univ]/sum(negMarketValue_.loc[date, q_min_univ])
        q_max_weight = negMarketValue_.loc[date, q_max_univ]/sum(negMarketValue_.loc[date, q_max_univ])
        
        factor_return.loc[date_1] = (q_min_weight * sec_return.loc[date_1, q_min_univ]).sum() - (q_max_weight * sec_return.loc[date_1, q_max_univ]).sum()
    return factor_return
    
  
sec_return = closePrice.pct_change()
negMarketValue_weight = negMarketValue.apply(lambda x: x/sum(x.dropna()), axis=1)
mkt_return = (sec_return * negMarketValue_weight).sum(axis=1)
mkt_return = mkt_return.dropna()
mkt_return.index = negMarketValue.index[1:]

smb_return = cal_factor_return(SIZE)
hml_return = cal_factor_return(-BP)



"""""""""
start = '2007-01-31'                       # 回测起始时间
end = '2017-07-30'                         # 回测结束时间

benchmark = 'ZZ500'                        # 策略参考标准
universe = DynamicUniverse('A')        # 证券池，支持股票和基金
capital_base = 10000000                    # 起始资金
freq = 'd'                                 # 策略类型，'d'表示日间策略使用日线回测
refresh_rate = 1                           # 调仓频率，表示执行handle_data的时间间隔

factor_dates = factor.index.values
  
commission = Commission(0.001, 0.001)     # 交易费率设为双边千分之二

def initialize(account):                   # 初始化虚拟账户状态
    pass

def handle_data(account):                  # 每个交易日的买入卖出指令
    pre_date = account.previous_date.strftime("%Y-%m-%d")
    if pre_date not in factor_dates:            # 因子只在每个月底计算，所以调仓也在每月最后一个交易日进行
        return
    
    # 拿取调仓日前一个交易日的因子，并按照相应十分位选择股票
    q = factor.ix[pre_date, account.universe].dropna()
    q_min = q.quantile(0.8)
    q_max = q.quantile(1)
    my_univ = q[q>=q_min][q<q_max].index.values

    # 调仓逻辑
    univ = [x for x in my_univ if x in account.universe]
    
    if len(univ) < 10:
        return
    
    # 不在目标股票池中的，卖出
    for s in account.valid_secpos:
        if s not in univ:
            order_to(s, 0)
        
    # 在目标股票池中的，等权买入
    buylist = {}
    v = account.reference_portfolio_value  * 1.05 / len(univ) 
    for s in univ:
        buylist[s] = v / account.reference_price[s] - account.security_position.get(s, 0)
    
    for s in sorted(buylist, key=buylist.get):
        order(s, buylist[s])
""""""""""
